name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
permissions:
  actions: read
  contents: write # Upgraded to write for release tagging
  packages: write # Added for npm publishing

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Node.js with auth token
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      # Setup pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false # We'll run install after setting up cache

      # Setup pnpm cache
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path | tr -d '\n')" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies
      - name: Install dependencies
        run: |
          pnpm install
        env:
          CI: true
          NODE_ENV: production

      # For pull requests - run tests and build only
      - if: github.event_name == 'pull_request'
        run: pnpm exec nx affected -t lint test build

      # For main branch - create a release
      - name: Version Bump & Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: version-bump
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Determine version bump type based on commit messages
          BUMP_TYPE="patch"  # Default to patch
          if git log -1 --pretty=%B | grep -i "BREAKING CHANGE"; then
            BUMP_TYPE="major"
          elif git log -1 --pretty=%B | grep -i "feat"; then
            BUMP_TYPE="minor"
          fi
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./libs/vite-plugin-use-electron/package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Bump version based on type
          if [ "$BUMP_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Set Git user
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          
          # Update package.json version
          sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" libs/vite-plugin-use-electron/package.json
          
          # Commit and push version bump
          git add libs/vite-plugin-use-electron/package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push
          
          # Build and publish the library
          cd libs/vite-plugin-use-electron
          
          # Create .npmrc file
          cat > .npmrc << EOF
          //registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}
          registry=https://registry.npmjs.org/
          always-auth=true
          EOF
          
          # Install dependencies including dev dependencies
          NODE_ENV=development pnpm install
          
          # Build with production settings
          NODE_ENV=production pnpm build
          
          # Publish to npm
          npm publish --access public
          cd ../../

      # Create GitHub Release after successful publish
      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-bump.outputs.new_version }}
          release_name: Release v${{ steps.version-bump.outputs.new_version }}
          draft: false
          prerelease: false
